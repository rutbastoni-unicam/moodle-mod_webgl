{"version":3,"file":"unitygame.min.js","sources":["../src/unitygame.js"],"sourcesContent":["//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/messages/>.\nimport {call as fetchMany} from 'core/ajax';\nimport $ from 'jquery';\n\n/**\n * Handle progress game from Unity interface to Moodle\n *\n * @module     mod_webgl\n */\nwindow.mod_webgl_plugin = {\n    initted: false,\n    trackGameViewed: () => {},\n    trackGameProgress: () => {}\n};\n\n/**\n * @typedef {Object} ProgressData\n * @property {number} score - achieved game score\n * @property {number} completedLevels - number of completed game levels\n * @property {boolean} puzzleSolved - if the puzzle of this game has been solved\n */\n\nexport const init = () => {\n    /**\n     * Call to internal API to set this game as viewed\n     */\n    const setGameLoaded = async () => {\n        const webglid = $('.webgl-iframe-content-loader').data('webgl');\n\n        const response = await fetchMany([{\n            methodname: 'mod_webgl_signal_game_loaded',\n            args: {'webglid': webglid}\n        }])[0];\n\n        if (!response) {\n            window.console.error('Error setting webgl ' + webglid + ' as viewed');\n        }\n        window.console.log(response);\n\n    };\n\n    /**\n     *\n      * @param {ProgressData} progressData\n     * @returns {Promise<void>}\n     */\n    const setGameProgress = async (progressData) => {\n        const webglid = $('.webgl-iframe-content-loader').data('webgl');\n        window.console.log('Setting progress data object');\n        window.console.log(progressData);\n\n        //public static function signal_game_progress($webglid, $score, $completedlevels, $puzzlesolved) {\n        const score = progressData?.score ? progressData.score : 0;\n        const completedLevels = progressData?.completedLevels ? progressData.completedLevels : 0;\n        const puzzleSolved = progressData?.puzzleSolved ? 1 : 0;\n\n        const response = await fetchMany([{\n            methodname: 'mod_webgl_signal_game_progress',\n            args: {'webglid': webglid, 'score': score, 'completedlevels': completedLevels, 'puzzlesolved': puzzleSolved}\n        }])[0];\n\n        window.console.log('completed game? ' + response);\n        if (response) {\n            // Completed activity so the user can return to the course\n            $('#mod_webgl_course_url').submit();\n        }\n\n    };\n\n    const checkWebglIframeLoaded = () => {\n        const unityFrame = $('.webgl-iframe-content-loader iframe');\n        if(unityFrame.length < 1) {\n            // No proper Unity framework installed\n            return;\n        }\n\n        const unityLoadingBar = unityFrame[0].contentDocument.querySelector(\"#unity-loading-bar\");\n        if (!unityLoadingBar) {\n            // No proper Unity framework installed\n            return;\n        }\n\n        const loadingBarStyle = unityLoadingBar.style.display;\n\n        // Unity loading bar still visible - game still not played\n        if (loadingBarStyle != 'none') {\n            setTimeout(checkWebglIframeLoaded, 250);\n            return;\n        }\n\n        // Unity game loaded - track activity as viewed\n        setGameLoaded();\n    };\n\n    window.mod_webgl_plugin.trackGameViewed = setGameLoaded;\n    window.mod_webgl_plugin.trackGameProgress = setGameProgress;\n\n    window.mod_webgl_plugin.initted = true;\n\n    // Autodetect game loaded\n    $(document).ready(checkWebglIframeLoaded);\n};"],"names":["window","mod_webgl_plugin","initted","trackGameViewed","trackGameProgress","setGameLoaded","async","webglid","data","response","methodname","args","console","error","log","checkWebglIframeLoaded","unityFrame","length","unityLoadingBar","contentDocument","querySelector","style","display","setTimeout","progressData","score","completedLevels","puzzleSolved","submit","document","ready"],"mappings":"6OAgBAA,OAAOC,iBAAmB,CACtBC,SAAS,EACTC,gBAAiB,OACjBC,kBAAmB,sBAUH,WAIVC,cAAgBC,gBACZC,SAAU,mBAAE,gCAAgCC,KAAK,SAEjDC,eAAiB,cAAU,CAAC,CAC9BC,WAAY,+BACZC,KAAM,SAAYJ,YAClB,GAECE,UACDT,OAAOY,QAAQC,MAAM,uBAAyBN,QAAU,cAE5DP,OAAOY,QAAQE,IAAIL,WAgCjBM,uBAAyB,WACrBC,YAAa,mBAAE,0CAClBA,WAAWC,OAAS,eAKjBC,gBAAkBF,WAAW,GAAGG,gBAAgBC,cAAc,0BAC/DF,uBAQkB,QAHCA,gBAAgBG,MAAMC,QAS9CjB,gBALIkB,WAAWR,uBAAwB,MAQ3Cf,OAAOC,iBAAiBE,gBAAkBE,cAC1CL,OAAOC,iBAAiBG,kBAjDAE,MAAAA,qBACdC,SAAU,mBAAE,gCAAgCC,KAAK,SACvDR,OAAOY,QAAQE,IAAI,gCACnBd,OAAOY,QAAQE,IAAIU,oBAGbC,MAAQD,MAAAA,cAAAA,aAAcC,MAAQD,aAAaC,MAAQ,EACnDC,gBAAkBF,MAAAA,cAAAA,aAAcE,gBAAkBF,aAAaE,gBAAkB,EACjFC,aAAeH,MAAAA,cAAAA,aAAcG,aAAe,EAAI,EAEhDlB,eAAiB,cAAU,CAAC,CAC9BC,WAAY,iCACZC,KAAM,SAAYJ,cAAkBkB,sBAA0BC,6BAAiCC,iBAC/F,GAEJ3B,OAAOY,QAAQE,IAAI,mBAAqBL,UACpCA,8BAEE,yBAAyBmB,UAiCnC5B,OAAOC,iBAAiBC,SAAU,sBAGhC2B,UAAUC,MAAMf"}