{"version":3,"file":"unitygame.min.js","sources":["../src/unitygame.js"],"sourcesContent":["//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/messages/>.\nimport {call as fetchMany} from 'core/ajax';\nimport ModalEvents from 'core/modal_events';\nimport ModalSaveCancel from 'core/modal_save_cancel';\nimport {get_string as getString} from 'core/str';\nimport Templates from 'core/templates';\nimport $ from 'jquery';\n\n/**\n * Handle progress game from Unity interface to Moodle\n *\n * @module     mod_webgl\n */\nwindow.mod_webgl_plugin = {\n    initted: false,\n    trackGameViewed: () => {},\n    trackGameProgress: () => {}\n};\n\n/**\n * @typedef {Object} ProgressData\n * @property {number} score - achieved game score\n * @property {number} completedLevels - number of completed game levels\n * @property {boolean} puzzleSolved - if the puzzle of this game has been solved\n */\n\nexport const init = () => {\n    const handleCompletionData = async (completiondata) => {\n        // Replace activity completion info\n        const activityInfosBlock = $('.activity-information');\n        if (activityInfosBlock.length) {\n            const renderObject = await Templates.renderForPromise('core_course/activity_info', completiondata);\n            await Templates.replaceNode(activityInfosBlock[0], renderObject.html, renderObject.js);\n        }\n\n        if (completiondata.overallcomplete) {\n            window.console.error('should show complete dialog');\n\n            const modalbacktocourse = await ModalSaveCancel.create({\n                title: getString('gamecompletedialog', 'mod_webgl'),\n                body: getString('gamecompletedialogbody', 'mod_webgl'),\n                buttons: {\n                    cancel: getString('gamecompletedialogcancel', 'mod_webgl'),\n                    save: getString('gamecompletedialogsave', 'mod_webgl')\n                }\n            });\n\n            // Remove default click listener outside the modal that makes it close;\n            // we want the user explicitly click a button to confirm his choice\n            modalbacktocourse.getRoot().off('click');\n\n            modalbacktocourse.getRoot().on(ModalEvents.save, () => {\n                $('#mod_webgl_course_url').submit();\n            });\n            modalbacktocourse.show();\n        }\n    };\n\n    /**\n     * Call to internal API to set this game as viewed\n     */\n    const setGameLoaded = async () => {\n        const webglid = $('.webgl-iframe-content-loader').data('webgl');\n\n        const response = await fetchMany([{\n            methodname: 'mod_webgl_signal_game_loaded',\n            args: {'webglid': webglid}\n        }])[0];\n\n        if (!response) {\n            window.console.error('Error setting webgl ' + webglid + ' as viewed');\n        } else {\n            handleCompletionData(response.completiondata);\n            window.console.log(response);\n        }\n\n    };\n\n    /**\n     *\n      * @param {ProgressData} progressData\n     * @returns {Promise<void>}\n     */\n    const setGameProgress = async (progressData) => {\n        const webglid = $('.webgl-iframe-content-loader').data('webgl');\n        window.console.log('Setting progress data object');\n        window.console.log(progressData);\n\n        //public static function signal_game_progress($webglid, $score, $completedlevels, $puzzlesolved) {\n        const score = progressData?.score ? progressData.score : 0;\n        const completedLevels = progressData?.completedLevels ? progressData.completedLevels : 0;\n        const puzzleSolved = progressData?.puzzleSolved ? 1 : 0;\n\n        const response = await fetchMany([{\n            methodname: 'mod_webgl_signal_game_progress',\n            args: {'webglid': webglid, 'score': score, 'completedlevels': completedLevels, 'puzzlesolved': puzzleSolved}\n        }])[0];\n\n        if (!response) {\n            window.console.error('Error setting webgl ' + webglid + ' progress data');\n        } else {\n            handleCompletionData(response.completiondata);\n            window.console.log(response);\n        }\n\n    };\n\n    const checkWebglIframeLoaded = () => {\n        const unityFrame = $('.webgl-iframe-content-loader iframe');\n        if(unityFrame.length < 1) {\n            // No proper Unity framework installed\n            return;\n        }\n\n        const unityLoadingBar = unityFrame[0].contentDocument.querySelector(\"#unity-loading-bar\");\n        if (!unityLoadingBar) {\n            // No proper Unity framework installed\n            return;\n        }\n\n        const loadingBarStyle = unityLoadingBar.style.display;\n\n        // Unity loading bar still visible - game still not played\n        if (loadingBarStyle != 'none') {\n            setTimeout(checkWebglIframeLoaded, 250);\n            return;\n        }\n\n        // Unity game loaded - track activity as viewed\n        setGameLoaded();\n    };\n\n    window.mod_webgl_plugin.trackGameViewed = setGameLoaded;\n    window.mod_webgl_plugin.trackGameProgress = setGameProgress;\n\n    window.mod_webgl_plugin.initted = true;\n\n    // Autodetect game loaded\n    $(document).ready(() => {\n        checkWebglIframeLoaded();\n    });\n\n};"],"names":["window","mod_webgl_plugin","initted","trackGameViewed","trackGameProgress","handleCompletionData","async","activityInfosBlock","length","renderObject","Templates","renderForPromise","completiondata","replaceNode","html","js","overallcomplete","console","error","modalbacktocourse","ModalSaveCancel","create","title","body","buttons","cancel","save","getRoot","off","on","ModalEvents","submit","show","setGameLoaded","webglid","data","response","methodname","args","log","checkWebglIframeLoaded","unityFrame","unityLoadingBar","contentDocument","querySelector","style","display","setTimeout","progressData","score","completedLevels","puzzleSolved","document","ready"],"mappings":"ikBAoBAA,OAAOC,iBAAmB,CACtBC,SAAS,EACTC,gBAAiB,OACjBC,kBAAmB,sBAUH,WACVC,qBAAuBC,MAAAA,uBAEnBC,oBAAqB,mBAAE,4BACzBA,mBAAmBC,OAAQ,OACrBC,mBAAqBC,mBAAUC,iBAAiB,4BAA6BC,sBAC7EF,mBAAUG,YAAYN,mBAAmB,GAAIE,aAAaK,KAAML,aAAaM,OAGnFH,eAAeI,gBAAiB,CAChChB,OAAOiB,QAAQC,MAAM,qCAEfC,wBAA0BC,2BAAgBC,OAAO,CACnDC,OAAO,mBAAU,qBAAsB,aACvCC,MAAM,mBAAU,yBAA0B,aAC1CC,QAAS,CACLC,QAAQ,mBAAU,2BAA4B,aAC9CC,MAAM,mBAAU,yBAA0B,gBAMlDP,kBAAkBQ,UAAUC,IAAI,SAEhCT,kBAAkBQ,UAAUE,GAAGC,sBAAYJ,MAAM,yBAC3C,yBAAyBK,YAE/BZ,kBAAkBa,SAOpBC,cAAgB3B,gBACZ4B,SAAU,mBAAE,gCAAgCC,KAAK,SAEjDC,eAAiB,cAAU,CAAC,CAC9BC,WAAY,+BACZC,KAAM,SAAYJ,YAClB,GAECE,UAGD/B,qBAAqB+B,SAASxB,gBAC9BZ,OAAOiB,QAAQsB,IAAIH,WAHnBpC,OAAOiB,QAAQC,MAAM,uBAAyBgB,QAAU,eAqC1DM,uBAAyB,WACrBC,YAAa,mBAAE,0CAClBA,WAAWjC,OAAS,eAKjBkC,gBAAkBD,WAAW,GAAGE,gBAAgBC,cAAc,0BAC/DF,uBAQkB,QAHCA,gBAAgBG,MAAMC,QAS9Cb,gBALIc,WAAWP,uBAAwB,MAQ3CxC,OAAOC,iBAAiBE,gBAAkB8B,cAC1CjC,OAAOC,iBAAiBG,kBAlDAE,MAAAA,qBACd4B,SAAU,mBAAE,gCAAgCC,KAAK,SACvDnC,OAAOiB,QAAQsB,IAAI,gCACnBvC,OAAOiB,QAAQsB,IAAIS,oBAGbC,MAAQD,MAAAA,cAAAA,aAAcC,MAAQD,aAAaC,MAAQ,EACnDC,gBAAkBF,MAAAA,cAAAA,aAAcE,gBAAkBF,aAAaE,gBAAkB,EACjFC,aAAeH,MAAAA,cAAAA,aAAcG,aAAe,EAAI,EAEhDf,eAAiB,cAAU,CAAC,CAC9BC,WAAY,iCACZC,KAAM,SAAYJ,cAAkBe,sBAA0BC,6BAAiCC,iBAC/F,GAECf,UAGD/B,qBAAqB+B,SAASxB,gBAC9BZ,OAAOiB,QAAQsB,IAAIH,WAHnBpC,OAAOiB,QAAQC,MAAM,uBAAyBgB,QAAU,mBAoChElC,OAAOC,iBAAiBC,SAAU,sBAGhCkD,UAAUC,OAAM,KACdb"}